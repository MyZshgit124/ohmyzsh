#autoload

function omz {
    [[ $# -gt 0 ]] || {
        _omz::help
        return 1
    }

    local command="$1"
    shift

    # Subcommand functions start with _ so that they don't
    # appear as completion entries when looking for `omz`
    (( $+functions[_omz::$command] )) || {
        _omz::help
        return 1
    }

    _omz::$command "$@"
}

function _omz {
    local -a subcmds
    subcmds=(
        'help:Usage information'
        'test:Fetch Pull Request for local testing'
    )

    if (( CURRENT == 2 )); then
        _describe 'command' subcmds
    fi

    return 0
}

compdef _omz omz


function _omz::help {
    cat <<EOF
Usage: omz <command> [options]

Available commands:

    help              Print this help message
    test <PR_NUMBER>  Fetch PR #NUMBER and rebase against master

EOF
}

function _omz::log {
    # $1 = info|warn|error|debug
    # $@ = text

    local logtype=$1
    local logname=${${functrace[1]#_}%:*}
    shift

    # Don't print anything if debug is not active
    if [[ $logtype = debug && -z $_OMZ_DEBUG ]]; then
        return
    fi

    # Choose coloring based on log type
    case "$logtype" in
        debug) print -P "%S%F{white}$logname%f%s: $@" ;;
        info) print -P "%F{green}$logname%f: $@" ;;
        warn) print -P "%F{yellow}$logname%f: $@" ;;
        error) print -P "%F{red}$logname%f: $@" ;;
    esac >&2
}

function _omz::test {
    # Allow $1 to be a URL to the pull request
    if [[ "$1" = https://* ]]; then
        1="${1:t}"
    fi

    # Check the input
    if ! [[ -n "$1" && "$1" =~ ^[[:digit:]]+$ ]]; then
        echo >&2 "Usage: omz test <PR_NUMBER_or_URL>"
        return 1
    fi

    # Fetch PR onto ohmyzsh/pull-<PR_NUMBER> branch and rebase against master
    # If any of these operations fail, undo the changes made
    (
        set -e
        cd -q "$ZSH"

        # Fetch pull request head
        _omz::log info "fetching PR #$1 to ohmyzsh/pull-$1..."
        command git fetch upstream refs/pull/$1/head:ohmyzsh/pull-$1 || {
            _omz::log error "error when trying to fetch PR #$1."
            return 1
        }

        # Rebase pull request branch against the current master
        _omz::log info "rebasing PR #$1..."
        command git rebase master ohmyzsh/pull-$1 || {
            command git rebase --abort &>/dev/null
            _omz::log warn "could not rebase PR #$1 on top of master."
            _omz::log warn "you might not see the latest stable changes."
            return 1
        }

        _omz::log info "fetch of PR #${1} successful."
    )

    if [[ $? -eq 0 ]]; then
        _omz::log info "running \`zsh\` to test the changes. Run \`exit\` to go back."
        zsh
    fi
}

omz "$@"
